{"index":{"version":"2.1.0","fields":["title","body"],"fieldVectors":[["title/adapters.html",[0,1.502]],["body/adapters.html",[0,2.711,1,1.169,2,0.859,3,2.541,4,3.746,5,2.286,6,2.87,7,2.182,8,2.87,9,1.19,10,2.182,11,2.87,12,2.182,13,2.87,14,2.829,15,2.848,16,2.182,17,2.87,18,2.182,19,2.87,20,1.751,21,2.182,22,3.171,23,1.307,24,1.947,25,2.545,26,2.87,27,0.106,28,0.151,29,0.197,30,0.197,31,0.297,32,0.591,33,0.591,34,0.591,35,0.734,36,0.734,37,0.812,38,0.812,39,0.812,40,0.812,41,0.812,42,0.812,43,2.182,44,0.26,45,1.947,46,1.437,47,2.182,48,0.59,49,2.182,50,2.87,51,1.19,52,1.751,53,2.182,54,2.182,55,2.476,56,2.182]],["title/adapters.html#Adapters",[0,1.502]],["body/adapters.html#Adapters",[0,2.675,1,1.161,2,0.855,3,2.524,4,3.721,5,2.27,6,2.841,7,2.16,8,2.841,9,1.177,10,2.16,11,2.841,12,2.16,13,2.841,14,2.815,15,2.829,16,2.16,17,2.841,18,2.16,19,2.841,20,1.733,21,2.16,22,3.155,23,1.293,25,2.532,26,2.841,27,0.104,28,0.149,29,0.195,30,0.195,31,0.294,32,0.585,33,0.585,34,0.585,35,0.726,36,0.726,37,0.803,38,0.803,39,0.803,40,0.803,41,0.803,42,0.803,43,2.16,44,0.266,45,1.927,46,1.422,47,2.16,48,0.587,49,2.16,50,2.841,51,1.177,52,1.733,53,2.16,54,2.16,56,2.16,57,1.733,58,2.451]],["title/index.html",[59,3.289]],["body/index.html",[0,2.107,1,0.828,2,0.659,9,1.1,12,1.339,14,1.801,15,1.339,16,1.339,18,1.339,22,2.018,23,1.62,25,1.62,27,0.148,28,0.092,29,0.121,30,0.121,31,0.182,32,0.363,33,0.363,34,0.363,35,0.45,36,0.45,37,0.498,38,0.498,39,0.498,40,0.498,41,0.498,42,0.498,43,1.339,44,0.269,45,1.801,46,1.329,47,2.018,48,0.452,49,1.339,51,1.1,52,1.075,53,1.339,54,1.339,55,1.519,56,1.339,60,2.655,61,1.339,62,1.761,63,2.655,64,0.611,65,1.761,66,2.655,67,1.761,68,1.339,69,1.075,70,1.761,71,1.761,72,1.963,73,0.665,74,1.195,75,1.075,76,1.002,77,2.655,78,1.62,79,1.827,80,1.075,81,1.761,82,1.075,83,1.761,84,1.761,85,1.761,86,1.761,87,0.605,88,0.498,89,0.605,90,0.73,91,0.73,92,0.73,93,0.882,94,0.882,95,0.882,96,0.882,97,0.882,98,0.882,99,0.882,100,1.075,101,1.075,102,1.075,103,1.075,104,1.075,105,1.075,106,1.339,107,1.339,108,1.339,109,1.339,110,1.339,111,1.339,112,1.339,113,1.339,114,1.339,115,1.339,116,1.339,117,1.339,118,1.339,119,1.339,120,1.761,121,1.761,122,1.761,123,1.761,124,1.761,125,1.761,126,1.761,127,1.761,128,1.761,129,1.761,130,1.761,131,1.339,132,1.761,133,1.761,134,1.075,135,3.498,136,1.62,137,2.018,138,1.006,139,1.311,140,3.818,141,1.339,142,2.018,143,1.339,144,1.761,145,2.018,146,0.912,147,1.912,148,1.761,149,1.075,150,1.761,151,1.761,152,1.329,153,1.761,154,1.761,155,1.339,156,1.761,157,1.761,158,1.761,159,1.339,160,1.339,161,0.882,162,1.761,163,1.222,164,1.761,165,1.782,166,1.761,167,1.62,168,1.761,169,0.882,170,1.761]],["title/index.html#Grimoire",[1,0.849]],["body/index.html#Grimoire",[0,2.494,1,1.065,2,0.862,9,1.733,14,2.316,16,2.595,18,2.595,23,1.904,60,4.181,61,2.595,62,3.414,63,4.181,64,0.962,65,3.414,66,4.181,67,3.414,68,2.595,69,2.083,70,3.414,71,3.414,72,1.884,73,1.288,74,2.316,75,2.083,76,1.288,77,4.181,78,1.904,79,1.904,80,2.083,81,3.414,82,2.083]],["title/index.html#Install",[83,2.722]],["body/index.html#Install",[27,0.15,45,2.772,84,4.087]],["title/index.html#Quick-Start",[85,2.026,86,2.026]],["body/index.html#Quick-Start",[0,1.557,2,0.394,12,1.453,14,1.296,15,1.453,22,2.145,23,1.285,25,1.722,27,0.145,28,0.1,29,0.131,30,0.131,31,0.198,32,0.394,33,0.394,34,0.394,35,0.488,36,0.488,37,0.54,38,0.54,39,0.54,40,0.54,41,0.54,42,0.54,43,1.453,44,0.273,45,1.296,46,1.413,47,2.145,48,0.475,49,1.453,51,1.17,52,1.166,53,1.453,54,1.453,56,1.453,58,1.649,72,1.851,76,0.721,78,1.285,79,1.687,87,0.656,88,0.54,89,0.656,90,0.792,91,0.792,92,0.792,93,0.957,94,0.957,95,0.957,96,0.957,97,0.957,98,0.957,99,0.957,100,1.166,101,1.166,102,1.166,103,1.166,104,1.166,105,1.166,106,1.453,107,1.453,108,1.453,109,1.453,110,1.453,111,1.453,112,1.453,113,1.453,114,1.453,115,1.453,116,1.453,117,1.453,118,1.453,119,1.453,120,1.911,121,1.911,122,1.911,123,1.911,124,1.911,125,1.911,126,1.911,127,1.911,128,1.911,129,1.911,130,1.911,131,1.453,132,1.911,133,1.911,134,1.166,135,3.559,136,1.722,137,2.145,138,1.048,139,1.357,140,3.952,141,1.453,142,2.145,143,1.453,144,1.911,145,2.145,146,0.969,147,1.979,148,1.911,149,1.166,150,1.911,151,1.911,152,1.413,153,1.911,154,1.911,155,1.453,156,1.911,157,1.911,158,1.911,159,1.453,160,1.453,161,0.957,162,1.911,163,1.272,164,1.911,165,1.855,166,1.911,167,1.722,168,1.911,169,0.957,170,1.911]],["title/association/preloading.html",[74,1.374,75,1.236]],["body/association/preloading.html",[1,1.233,2,0.691,9,1.391,20,1.166,27,0.07,28,0.1,29,0.131,30,0.131,31,0.198,32,0.394,33,0.394,34,0.394,35,0.488,36,1.01,37,0.54,38,0.54,39,0.54,40,0.54,41,0.54,42,0.54,44,0.264,64,0.772,68,1.453,69,1.166,73,0.721,74,1.914,75,2.823,76,1.561,87,0.656,88,0.54,89,0.656,90,1.17,91,0.792,92,0.792,93,0.957,94,0.957,95,0.957,96,0.957,97,0.957,98,0.957,99,0.957,100,1.166,101,1.166,102,1.166,103,1.166,104,1.166,105,1.166,106,1.453,107,1.453,108,1.453,109,1.453,110,1.453,111,1.453,112,1.453,113,1.453,114,1.453,115,1.453,116,1.453,117,1.453,118,1.453,119,1.453,134,2.047,136,2.261,137,3.145,138,0.54,139,0.969,141,1.453,142,2.145,143,1.453,146,0.656,163,1.469,171,1.911,172,2.822,173,0.969,174,1.453,175,1.453,176,1.413,177,2.822,178,1.722,179,1.911,180,1.911,181,1.911,182,1.453,183,0.87,184,1.37,185,0.656,186,2.611,187,2.31,188,2.31,189,1.911,190,1.911,191,1.911,192,1.96,193,2.822,194,2.31,195,3.952,196,2.31,197,2.31,198,2.822,199,3.355,200,2.31,201,1.055,202,2.822,203,3.705,204,1.911,205,1.911,206,1.911,207,3.355,208,1.453,209,1.911,210,1.911,211,1.296,212,0.957,213,1.453,214,1.911,215,1.166,216,1.911]],["title/association/preloading.html#Preloading",[75,1.661]],["body/association/preloading.html#Preloading",[1,1.224,2,0.684,9,1.376,20,1.145,27,0.069,28,0.098,29,0.129,30,0.129,31,0.194,32,0.387,33,0.387,34,0.387,35,0.48,36,1.003,37,0.531,38,0.531,39,0.531,40,0.531,41,0.531,42,0.531,44,0.268,64,0.764,68,1.427,69,1.145,73,0.708,74,1.889,75,2.771,76,1.551,87,0.644,88,0.531,89,0.644,90,1.154,91,0.778,92,0.778,93,0.94,94,0.94,95,0.94,96,0.94,97,0.94,98,0.94,99,0.94,100,1.145,101,1.145,102,1.145,103,1.145,104,1.145,105,1.145,106,1.427,107,1.427,108,1.427,109,1.427,110,1.427,111,1.427,112,1.427,113,1.427,114,1.427,115,1.427,116,1.427,117,1.427,118,1.427,119,1.427,134,2.025,136,2.241,137,3.124,138,0.531,139,0.956,141,1.427,142,2.117,143,1.427,146,0.644,163,1.461,171,1.877,172,2.784,173,0.956,174,1.427,175,1.427,176,1.394,177,2.784,178,1.699,179,1.877,180,1.877,181,1.877,182,1.427,183,0.854,184,1.363,185,0.644,186,2.595,189,1.877,190,1.877,191,1.877,192,1.954,193,2.784,195,3.923,198,2.784,199,1.877,201,1.035,202,2.784,203,3.672,204,1.877,205,1.877,206,1.877,207,3.319,208,1.427,209,1.877,210,1.877,212,0.94,213,1.427,214,1.877,215,1.145,216,1.877,217,2.268,218,2.268,219,2.268,220,2.268,221,2.268,222,2.268,223,2.268,224,2.268,225,1.035]],["title/crud/delete.html",[169,1.014,226,0.632]],["body/crud/delete.html",[27,0.153,28,0.177,29,0.232,30,0.232,31,0.349,32,0.695,33,0.695,34,0.695,44,0.261,48,0.636,88,0.954,135,2.563,163,1.543,165,1.688,167,2.057,169,2.512,184,1.294,185,1.158,201,1.861,215,2.057,226,1.463,227,2.563,228,3.372,229,2.563]],["title/crud/delete.html#Delete",[169,1.363]],["body/crud/delete.html#Delete",[27,0.153,28,0.178,29,0.233,30,0.233,31,0.351,32,0.698,33,0.698,34,0.698,44,0.261,48,0.637,88,0.958,135,2.574,163,1.546,165,1.695,167,2.066,169,2.489,184,1.298,185,1.163,201,1.868,215,2.066,226,1.465,227,2.574,228,3.386,229,2.574]],["title/crud/insert.html",[226,0.632,230,0.84]],["body/crud/insert.html",[2,0.883,5,0.99,23,1.136,27,0.112,28,0.16,29,0.209,30,0.209,31,0.315,32,0.626,33,0.514,34,0.514,35,0.638,36,0.872,37,0.459,38,0.459,39,0.459,40,0.459,41,0.459,42,0.459,44,0.271,48,0.607,51,1.414,61,1.234,64,0.373,72,0.896,73,0.613,76,0.942,79,1.77,80,1.522,87,0.557,88,1.041,89,0.557,131,1.234,138,1.099,139,1.044,146,0.557,147,2.093,149,0.99,152,1.522,155,1.897,161,0.813,163,1.472,173,1.044,176,2.027,178,0.99,183,0.739,184,1.49,185,1.39,192,1.034,211,1.101,212,1.249,226,1.064,230,1.777,231,1.623,232,1.234,233,1.234,234,1.623,235,1.623,236,1.234,237,2.311,238,1.897,239,1.623,240,1.623,241,2.082,242,1.623,243,1.897,244,1.034,245,1.522,246,1.961,247,1.623,248,1.897,249,1.897,250,1.623,251,1.623,252,1.623,253,1.623,254,1.623,255,1.623,256,1.623,257,1.623,258,1.623,259,1.897,260,1.623,261,2.594,262,1.623,263,1.623,264,2.153,265,1.623,266,1.623,267,1.623,268,1.623,269,1.234,270,1.234,271,1.855,272,1.234,273,1.234,274,1.234,275,1.234,276,1.234,277,3.412,278,2.495,279,1.897,280,1.897,281,1.234,282,1.897,283,1.234,284,1.623,285,1.623,286,1.234,287,0.99,288,0.813,289,1.4,290,0.99,291,0.99,292,1.234,293,1.234,294,1.897]],["title/crud/insert.html#Insert",[230,1.128]],["body/crud/insert.html#Insert",[2,0.882,5,0.985,23,1.131,27,0.111,28,0.159,29,0.208,30,0.208,31,0.314,32,0.624,33,0.512,34,0.512,35,0.635,36,0.869,37,0.456,38,0.456,39,0.456,40,0.456,41,0.456,42,0.456,44,0.271,48,0.606,51,1.41,61,1.227,64,0.371,72,0.89,73,0.609,76,0.937,79,1.766,80,1.516,87,0.554,88,1.039,89,0.554,131,1.227,138,1.097,139,1.04,146,0.554,147,2.089,149,0.985,152,1.516,155,1.888,161,0.808,163,1.469,173,1.04,176,2.023,178,0.985,183,0.735,184,1.489,185,1.387,192,1.03,212,1.244,225,0.89,226,1.061,230,1.729,232,1.227,233,1.227,234,1.614,235,1.614,236,1.227,237,2.302,238,1.888,239,1.614,241,2.075,242,1.614,243,1.888,244,1.03,245,1.516,247,1.614,248,1.888,249,1.888,250,1.614,251,1.614,252,1.614,253,1.614,254,1.614,255,1.614,256,1.614,257,1.614,258,1.614,259,1.888,260,1.614,261,2.586,262,1.614,263,1.614,265,1.614,266,1.614,267,1.614,268,1.614,269,1.227,270,1.227,271,1.848,272,1.227,273,1.227,274,1.227,275,1.227,276,1.227,277,3.401,279,1.888,280,1.888,281,1.227,282,1.888,283,1.227,285,1.614,286,1.227,287,0.985,288,0.808,290,0.985,291,0.985,292,1.227,293,1.227,294,1.888,295,1.614,296,1.614,297,1.95,298,2.143,299,2.484,300,1.614,301,1.392]],["title/crud/query.html",[64,0.466,226,0.632]],["body/crud/query.html",[2,0.805,3,1.939,7,1.12,9,0.959,10,1.12,24,1.57,27,0.149,28,0.196,29,0.242,30,0.242,31,0.45,32,0.477,33,0.477,34,0.477,35,0.591,36,0.955,37,0.417,38,0.417,39,0.417,40,0.417,41,0.916,42,0.417,44,0.271,48,0.66,64,0.931,73,0.873,78,0.671,87,0.506,88,0.417,89,0.506,90,0.611,91,0.611,92,0.611,93,0.738,94,0.738,95,0.738,96,0.738,97,0.738,98,0.738,99,0.738,100,0.899,101,0.899,102,0.899,103,0.899,104,0.899,105,0.899,136,1.744,138,1.057,161,0.738,165,0.738,169,0.738,173,0.506,183,1.301,184,1.219,185,1.209,192,0.611,201,1.277,211,1.939,212,0.738,213,1.759,226,1.165,227,1.759,230,0.611,241,1.976,244,0.611,302,1.473,303,1.473,304,2.387,305,1.473,306,2.534,307,1.473,308,1.473,309,1.473,310,1.12,311,1.473,312,2.794,313,1.473,314,1.473,315,1.759,316,1.473,317,1.473,318,1.997,319,1.997,320,1.473,321,1.473,322,1.473,323,2.387,324,2.858,325,2.314,326,2.823,327,1.473,328,1.473,329,2.858,330,1.759,331,3.164,332,2.314,333,1.473,334,2.314,335,2.858,336,1.473,337,1.473,338,2.314,339,2.314,340,2.794,341,1.473,342,1.473,343,1.473,344,1.473,345,2.466,346,2.466,347,2.314,348,1.473,349,1.473,350,1.473,351,1.473,352,2.466,353,2.314,354,2.314,355,2.314,356,1.473,357,1.473,358,1.473,359,1.473,360,1.12,361,1.12,362,1.473,363,1.473,364,1.473,365,1.473,366,1.473,367,1.473,368,2.314,369,2.314,370,2.314,371,1.473]],["title/crud/query.html#Query",[64,0.626]],["body/crud/query.html#Query",[2,0.81,57,2.399,64,1.046,73,1.484,78,1.79,169,1.969,230,1.63,302,3.932,303,3.932,304,2.667]],["title/crud/query.html#Where",[]],["body/crud/query.html#Where",[2,0.799,7,1.6,9,1.255,10,1.6,27,0.111,28,0.11,29,0.145,30,0.145,31,0.218,32,0.434,33,0.434,34,0.434,35,0.538,36,1.05,37,0.595,38,0.595,39,0.595,40,0.595,41,1.097,42,0.595,44,0.27,48,0.624,57,1.285,64,0.892,73,0.794,87,0.723,88,0.595,89,0.723,90,0.873,91,0.873,92,0.873,93,1.054,94,1.054,95,1.054,96,1.054,97,1.054,98,1.054,99,1.054,100,1.285,101,1.285,102,1.285,103,1.285,104,1.285,105,1.285,136,2.164,138,0.856,161,1.054,183,1.379,184,1.335,185,1.04,201,1.162,213,2.302,226,1.282,227,2.302,241,2.366,244,0.873,305,2.105,306,2.787,307,2.105,308,2.105,309,2.105,310,1.6,311,2.105,312,3.06,313,2.105,314,2.105,315,2.302,316,2.105,317,2.105,318,1.816,319,1.816,320,2.105,321,2.105,322,2.105,323,2.631,324,3.546,325,3.028,326,2.631,327,2.105,328,2.105,329,3.546,330,2.302,331,2.302,332,3.028,333,2.105,334,3.028,335,3.546,336,2.105,337,2.105,338,3.028,339,3.028,340,3.06,341,2.105,342,2.105]],["title/crud/query.html#Selecting-Fields",[173,0.695,304,1.374]],["body/crud/query.html#Selecting-Fields",[27,0.164,28,0.2,44,0.248,138,1.262,165,1.905,185,1.532,201,2.1,225,2.1,226,1.187,304,2.581,318,3.283,343,3.805,344,3.805]],["title/crud/query.html#Offset-and-Limit",[345,1.747,346,1.747]],["body/crud/query.html#Offset-and-Limit",[27,0.135,28,0.193,29,0.253,30,0.253,31,0.523,44,0.253,48,0.618,64,0.845,326,2.963,345,3.768,346,3.768,347,4.368]],["title/crud/query.html#Order",[3,1.846]],["body/crud/query.html#Order",[3,3.018,27,0.139,28,0.199,29,0.261,30,0.261,31,0.392,44,0.256,48,0.63,138,1.258,348,3.788,349,3.788,350,3.788,351,3.788]],["title/crud/query.html#Group-By",[352,2.348]],["body/crud/query.html#Group-By",[27,0.133,28,0.189,29,0.248,30,0.248,31,0.373,36,0.922,44,0.252,48,0.612,185,1.238,225,1.99,304,2.932,323,2.446,326,2.932,340,3.112,352,3.729,353,4.322,354,4.322,355,4.322,356,3.607,357,3.607]],["title/crud/query.html#Join",[331,2.069]],["body/crud/query.html#Join",[2,0.832,27,0.119,28,0.169,29,0.222,30,0.222,31,0.334,32,0.665,33,0.665,34,0.665,35,0.825,44,0.265,48,0.654,183,1.47,184,1.007,192,1.338,212,1.616,225,1.781,306,2.189,312,2.785,319,2.785,326,2.189,331,3.687,358,3.228,359,3.228,360,2.454,361,2.454,362,3.228,363,3.228,364,3.228,365,3.228,366,3.228,367,3.228,368,4.038,369,4.038,370,4.038,371,3.228]],["title/crud/update.html",[78,0.922,226,0.632]],["body/crud/update.html",[1,0.467,2,0.882,5,0.914,20,0.914,21,1.138,23,0.682,27,0.157,28,0.152,29,0.199,30,0.199,31,0.299,32,0.595,33,0.595,34,0.595,35,0.738,36,0.907,37,0.663,38,0.423,39,0.423,40,0.423,41,0.423,42,0.423,44,0.271,48,0.606,51,1.47,64,0.344,72,0.826,73,0.565,76,0.884,78,2.129,79,1.488,80,0.914,87,0.514,88,1.112,89,0.514,90,0.621,91,0.621,92,0.621,138,1.064,139,0.992,146,0.514,147,2.037,149,0.914,152,1.776,161,1.173,163,1.469,165,1.968,167,1.762,173,0.805,176,1.968,178,0.914,182,1.782,183,0.682,184,1.459,185,1.436,192,0.971,208,1.138,211,1.016,212,1.173,215,1.43,226,1.305,229,1.138,230,0.621,231,1.497,232,1.138,233,1.138,236,1.138,237,1.138,238,1.782,240,1.497,241,1.994,243,2.195,244,0.621,245,0.914,248,1.138,259,1.138,261,2.484,264,1.292,269,1.138,270,1.138,271,1.43,272,1.138,273,1.138,274,1.138,275,1.138,276,1.138,278,2.344,279,1.782,280,1.782,281,1.138,282,2.195,283,1.138,284,1.497,286,1.138,287,0.914,288,1.173,289,1.292,290,0.914,291,0.914,292,1.138,293,1.138,294,1.782,306,2.216,323,1.016,361,1.138,372,1.497,373,1.782,374,2.344,375,1.782,376,1.497,377,2.832,378,3.267]],["title/crud/update.html#Update",[78,1.239]],["body/crud/update.html#Update",[1,0.465,2,0.88,5,0.909,20,0.909,21,1.132,23,0.678,27,0.157,28,0.151,29,0.198,30,0.198,31,0.298,32,0.593,33,0.593,34,0.593,35,0.736,36,0.904,37,0.66,38,0.421,39,0.421,40,0.421,41,0.421,42,0.421,44,0.272,48,0.605,51,1.466,64,0.343,72,0.822,73,0.562,76,0.881,78,2.11,79,1.483,80,0.909,87,0.511,88,1.109,89,0.511,90,0.617,91,0.617,92,0.617,138,1.061,139,0.988,146,0.511,147,2.034,149,0.909,152,1.771,161,1.169,163,1.467,165,1.964,167,1.756,173,0.801,176,1.964,178,0.909,182,1.774,183,0.678,184,1.457,185,1.434,192,0.967,208,1.132,212,1.169,215,1.424,225,0.822,226,1.303,229,1.132,230,0.617,232,1.132,233,1.132,236,1.132,237,1.132,238,1.774,241,1.988,243,2.188,244,0.617,245,0.909,248,1.132,259,1.132,261,2.476,269,1.132,270,1.132,271,1.424,272,1.132,273,1.132,274,1.132,275,1.132,276,1.132,279,1.774,280,1.774,281,1.132,282,2.188,283,1.132,286,1.132,287,0.909,288,1.169,290,0.909,291,0.909,292,1.132,293,1.132,294,1.774,295,1.489,296,1.489,298,1.285,299,2.334,300,1.489,301,1.285,306,2.21,323,1.01,361,1.132,372,1.489,373,1.774,374,2.334,375,1.774,376,1.489,378,3.258,379,2.82]],["title/others/logger.html",[82,1.661]],["body/others/logger.html",[1,1.074,9,1.427,24,2.335,27,0.127,28,0.181,29,0.237,30,0.237,44,0.264,46,1.723,48,0.487,64,0.967,69,2.1,82,2.955,139,1.182,244,1.427,288,2.104,290,2.564,380,3.194,381,4.159,382,3.442,383,3.442,384,4.202,385,3.442,386,2.617,387,3.442]],["title/others/logger.html#Logger",[82,1.661]],["body/others/logger.html#Logger",[1,1.078,9,1.433,27,0.127,28,0.181,29,0.238,30,0.238,44,0.264,46,1.731,48,0.489,57,2.109,64,0.969,69,2.109,82,2.886,139,1.187,244,1.433,288,2.109,290,2.57,380,3.202,382,3.456,383,3.456,384,4.213,385,3.456,386,2.628,387,3.456,388,4.177]],["title/others/field-mapping.html",[146,0.695,173,0.695]],["body/others/field-mapping.html",[2,0.842,24,2.233,27,0.121,28,0.173,29,0.226,30,0.226,31,0.341,44,0.256,76,1.678,134,2.009,138,1.156,139,1.13,146,1.597,173,1.597,174,2.502,289,2.84,291,2.009,360,2.502,380,3.108,389,3.292,390,3.978,391,3.292,392,3.292,393,3.292,394,4.088,395,4.088,396,3.978,397,3.292,398,4.088,399,3.292,400,3.292,401,3.292,402,3.292]],["title/others/field-mapping.html#Field-Mapping",[146,0.695,173,0.695]],["body/others/field-mapping.html#Field-Mapping",[2,0.842,27,0.121,28,0.173,29,0.226,30,0.226,31,0.341,44,0.262,57,2.009,76,1.678,134,2.009,138,1.156,139,1.13,146,1.527,173,1.527,174,2.502,291,2.009,301,2.84,360,2.502,380,3.108,389,3.292,391,3.292,392,3.292,393,3.292,394,4.088,395,4.088,397,3.292,398,4.088,399,3.292,400,3.292,401,3.292,402,3.292,403,3.978,404,3.978]],["title/others/transactions.html",[186,1.661]],["body/others/transactions.html",[1,1.151,24,2.161,25,1.943,27,0.083,28,0.119,29,0.155,30,0.155,31,0.234,32,0.466,33,0.466,34,0.466,35,0.578,36,0.578,37,0.639,38,0.639,39,0.639,40,0.639,41,0.639,42,0.639,44,0.265,46,1.132,48,0.451,51,1.32,52,2.673,55,1.95,79,1.45,87,0.776,88,0.639,89,0.776,90,0.937,91,0.937,92,0.937,93,1.132,94,1.132,95,1.132,96,1.132,97,1.132,98,1.132,99,1.132,145,1.718,147,1.595,152,2.114,159,1.718,160,2.421,163,1.094,175,1.718,176,1.132,184,1.317,186,2.804,192,1.816,211,2.502,230,1.529,244,0.937,245,1.379,249,1.718,264,1.95,271,1.379,287,1.379,288,2.005,310,1.718,315,2.421,330,1.718,373,1.718,375,1.718,386,3.494,405,2.26,406,3.688,407,3.185,408,2.26,409,3.185,410,2.26,411,2.26,412,2.26,413,2.26,414,2.26,415,2.26,416,2.26,417,2.26,418,2.26,419,2.26,420,2.26,421,2.26,422,2.26,423,2.26,424,2.26,425,2.26,426,2.731,427,2.26,428,2.26,429,3.185,430,2.26,431,2.26]],["title/others/transactions.html#Transactions",[186,1.661]],["body/others/transactions.html#Transactions",[1,1.144,25,1.929,27,0.082,28,0.117,29,0.154,30,0.154,31,0.231,32,0.461,33,0.461,34,0.461,35,0.571,36,0.571,37,0.632,38,0.632,39,0.632,40,0.632,41,0.632,42,0.632,44,0.268,46,1.119,48,0.447,51,1.31,52,2.663,57,1.929,58,1.929,79,1.439,87,0.768,88,0.632,89,0.768,90,0.927,91,0.927,92,0.927,93,1.119,94,1.119,95,1.119,96,1.119,97,1.119,98,1.119,99,1.119,145,1.7,147,1.583,152,2.105,159,1.7,160,2.403,163,1.085,175,1.7,176,1.119,184,1.312,186,2.738,192,1.809,225,2.023,230,1.52,244,0.927,245,1.364,249,1.7,271,1.364,287,1.364,288,1.996,298,1.929,310,1.7,315,2.403,330,1.7,373,1.7,375,1.7,386,3.484,405,2.236,406,3.667,407,3.161,408,2.236,409,3.161,410,2.236,411,2.236,412,2.236,413,2.236,414,2.236,415,2.236,416,2.236,417,2.236,418,2.236,419,2.236,420,2.236,421,2.236,422,2.236,423,2.236,424,2.236,425,2.236,427,2.236,428,2.236,429,3.161,430,2.236,431,2.236,432,2.702]]],"invertedIndex":[["",{"_index":44,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["1",{"_index":27,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Install":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["10",{"_index":36,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Group-By":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["100",{"_index":151,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["1000",{"_index":158,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["11",{"_index":37,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["12",{"_index":38,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["13",{"_index":39,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["14",{"_index":40,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["15",{"_index":41,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["16",{"_index":42,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["17",{"_index":87,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["18",{"_index":88,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["19",{"_index":89,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["2",{"_index":28,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["20",{"_index":90,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["21",{"_index":91,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["22",{"_index":92,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["23",{"_index":93,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["24",{"_index":94,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["25",{"_index":95,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["26",{"_index":96,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["27",{"_index":97,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["28",{"_index":98,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["29",{"_index":99,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["3",{"_index":29,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["30",{"_index":100,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["31",{"_index":101,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["32",{"_index":102,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["33",{"_index":103,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["34",{"_index":104,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["35",{"_index":105,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["36",{"_index":106,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["37",{"_index":107,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["38",{"_index":108,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["39",{"_index":109,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["4",{"_index":30,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["40",{"_index":110,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["41",{"_index":111,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["42",{"_index":112,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["43",{"_index":113,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["44",{"_index":114,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["45",{"_index":115,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["46",{"_index":116,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["47",{"_index":117,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["48",{"_index":118,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["49",{"_index":119,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["5",{"_index":31,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["50",{"_index":120,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["51",{"_index":121,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["52",{"_index":122,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["53",{"_index":123,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["54",{"_index":124,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["55",{"_index":125,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["56",{"_index":126,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["57",{"_index":127,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["58",{"_index":128,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["59",{"_index":129,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["6",{"_index":32,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["60",{"_index":130,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["7",{"_index":33,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["8",{"_index":34,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["9",{"_index":35,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["ad",{"_index":327,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["adapt",{"_index":0,"title":{"adapters.html":{},"adapters.html#Adapters":{}},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{}}}],["adapter.clos",{"_index":54,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["add",{"_index":213,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["addres",{"_index":414,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["address",{"_index":192,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["addresses.user_id",{"_index":364,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["addresses.user_id=users.id",{"_index":358,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["advantag",{"_index":251,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["ag",{"_index":185,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Group-By":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["age=10",{"_index":329,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["age=15",{"_index":334,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["age=18",{"_index":229,"title":{},"body":{"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["alic",{"_index":241,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["all(&amp;allus",{"_index":326,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{}}}],["all_cap",{"_index":397,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["allcap",{"_index":394,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["allus",{"_index":322,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["alongsid",{"_index":287,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["altern",{"_index":233,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["amp;product",{"_index":162,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["amp;us",{"_index":276,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["api",{"_index":65,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["argument",{"_index":328,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["array",{"_index":375,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["ascend",{"_index":348,"title":{},"body":{"crud/query.html":{},"crud/query.html#Order":{}}}],["associ",{"_index":74,"title":{"association/preloading.html":{}},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["assum",{"_index":181,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["automat",{"_index":315,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["avail",{"_index":8,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["back",{"_index":421,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["bandung",{"_index":216,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["befor",{"_index":254,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["behaviour",{"_index":292,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["belong",{"_index":205,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["below",{"_index":6,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["bool",{"_index":395,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["box",{"_index":11,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["builder",{"_index":73,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Query":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["builtin",{"_index":66,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["buyer",{"_index":195,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["buyer.address",{"_index":210,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["buyerid",{"_index":193,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["c.eq(ag",{"_index":339,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["c.eq(c.i",{"_index":363,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["c.i",{"_index":312,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{}}}],["c.ne(ag",{"_index":333,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["care",{"_index":279,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["case",{"_index":392,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["cast",{"_index":413,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["caus",{"_index":409,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["ch",{"_index":147,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["ch.chang",{"_index":424,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["ch.error",{"_index":159,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["chang",{"_index":271,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["changeset",{"_index":79,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["changeset.cast(product",{"_index":148,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["changeset.cast(us",{"_index":272,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["changeset.changeset",{"_index":425,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["changeset.validatemin(ch",{"_index":150,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["changeset.validaterequired(ch",{"_index":149,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["changeuser(us",{"_index":415,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["check",{"_index":309,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["citi",{"_index":198,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["city=bandung",{"_index":214,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["column",{"_index":314,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["commit",{"_index":406,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["condit",{"_index":306,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["connect",{"_index":4,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["convert",{"_index":389,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["count",{"_index":340,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Group-By":{}}}],["count(id",{"_index":355,"title":{},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["creat",{"_index":23,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["created_at",{"_index":285,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["createdat",{"_index":141,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["crew_id",{"_index":294,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["current",{"_index":68,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["custom",{"_index":69,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"others/logger.html":{},"others/logger.html#Logger":{}}}],["data",{"_index":155,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["databas",{"_index":5,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["database.us",{"_index":256,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["db",{"_index":399,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["db:\"all_cap",{"_index":396,"title":{},"body":{"others/field-mapping.html":{}}}],["db:\"user_id",{"_index":194,"title":{},"body":{"association/preloading.html":{}}}],["db:all_cap",{"_index":404,"title":{},"body":{"others/field-mapping.html#Field-Mapping":{}}}],["db:user_id",{"_index":219,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["deal",{"_index":259,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["declar",{"_index":310,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["default",{"_index":380,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["defer",{"_index":53,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["defin",{"_index":291,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["delet",{"_index":169,"title":{"crud/delete.html":{},"crud/delete.html#Delete":{}},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/query.html":{},"crud/query.html#Query":{}}}],["depend",{"_index":234,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["descend",{"_index":350,"title":{},"body":{"crud/query.html":{},"crud/query.html#Order":{}}}],["directli",{"_index":238,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["don&apos;t",{"_index":299,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{}}}],["don't",{"_index":278,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{}}}],["done",{"_index":341,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["durat",{"_index":384,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{}}}],["easiest",{"_index":236,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["easili",{"_index":71,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["ensur",{"_index":428,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["entiti",{"_index":393,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["equal",{"_index":319,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{}}}],["er",{"_index":343,"title":{},"body":{"crud/query.html":{},"crud/query.html#Selecting-Fields":{}}}],["err",{"_index":48,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/query.html#Order":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["error",{"_index":386,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["especi",{"_index":248,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["execut",{"_index":416,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["exist",{"_index":275,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["express",{"_index":332,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["featur",{"_index":63,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["field",{"_index":173,"title":{"crud/query.html#Selecting-Fields":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["field&#x2019;",{"_index":403,"title":{},"body":{"others/field-mapping.html#Field-Mapping":{}}}],["field’",{"_index":390,"title":{},"body":{"others/field-mapping.html":{}}}],["filter",{"_index":274,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["find",{"_index":165,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/query.html":{},"crud/query.html#Selecting-Fields":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["first",{"_index":20,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["flexibl",{"_index":60,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["follow",{"_index":182,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["foreign",{"_index":180,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["foreign_key",{"_index":179,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["foreign_key:\"buyerid",{"_index":188,"title":{},"body":{"association/preloading.html":{}}}],["foreign_key:\"id",{"_index":197,"title":{},"body":{"association/preloading.html":{}}}],["foreign_key:buyerid",{"_index":218,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["foreign_key:id",{"_index":221,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["full",{"_index":308,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["full_nam",{"_index":402,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["fullnam",{"_index":401,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["func",{"_index":46,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["function",{"_index":288,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["gender",{"_index":353,"title":{},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["gener",{"_index":302,"title":{},"body":{"crud/query.html":{},"crud/query.html#Query":{}}}],["github.com/fs02/grimoir",{"_index":45,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Install":{},"index.html#Quick-Start":{}}}],["github.com/fs02/grimoire/adapter/mysql",{"_index":15,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["github.com/fs02/grimoire/adapter/postgr",{"_index":17,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["github.com/fs02/grimoire/adapter/sqlite3",{"_index":19,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["github.com/fs02/grimoire/c",{"_index":132,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["github.com/fs02/grimoire/changeset",{"_index":133,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["go",{"_index":84,"title":{},"body":{"index.html":{},"index.html#Install":{}}}],["godoc",{"_index":13,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["golang",{"_index":239,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["golang.it",{"_index":62,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["grimoir",{"_index":1,"title":{"index.html#Grimoire":{}},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["grimoire&#x2019;",{"_index":57,"title":{},"body":{"adapters.html#Adapters":{},"crud/query.html#Query":{},"crud/query.html#Where":{},"others/logger.html#Logger":{},"others/field-mapping.html#Field-Mapping":{},"others/transactions.html#Transactions":{}}}],["grimoire&apos;",{"_index":58,"title":{},"body":{"adapters.html#Adapters":{},"index.html#Quick-Start":{},"others/transactions.html#Transactions":{}}}],["grimoire'",{"_index":55,"title":{},"body":{"adapters.html":{},"index.html":{},"others/transactions.html":{}}}],["grimoire.new(adapt",{"_index":56,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["grimoire’",{"_index":24,"title":{},"body":{"adapters.html":{},"crud/query.html":{},"others/logger.html":{},"others/field-mapping.html":{},"others/transactions.html":{}}}],["group",{"_index":352,"title":{"crud/query.html#Group-By":{}},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["guess",{"_index":191,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["handl",{"_index":249,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["have",{"_index":356,"title":{},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["having(c.gt(ag",{"_index":357,"title":{},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["hold",{"_index":269,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["id",{"_index":136,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["id=1",{"_index":167,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["id=10",{"_index":206,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["identifi",{"_index":313,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["implement",{"_index":70,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["import",{"_index":43,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["initi",{"_index":22,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["insert",{"_index":230,"title":{"crud/insert.html":{},"crud/insert.html#Insert":{}},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Query":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["insert(&amp;us",{"_index":277,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["insid",{"_index":330,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["instal",{"_index":83,"title":{"index.html#Install":{}},"body":{"index.html":{}}}],["instanc",{"_index":26,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["int",{"_index":137,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["interfac",{"_index":72,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["it&#x2019;",{"_index":298,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{},"others/transactions.html#Transactions":{}}}],["it&apos;",{"_index":225,"title":{},"body":{"association/preloading.html#Preloading":{},"crud/insert.html#Insert":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Group-By":{},"crud/query.html#Join":{},"crud/update.html#Update":{},"others/transactions.html#Transactions":{}}}],["it&apos;l",{"_index":301,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{},"others/field-mapping.html#Field-Mapping":{}}}],["it'",{"_index":211,"title":{},"body":{"association/preloading.html":{},"crud/insert.html":{},"crud/query.html":{},"crud/update.html":{},"others/transactions.html":{}}}],["it'll",{"_index":289,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{},"others/field-mapping.html":{}}}],["item",{"_index":376,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{}}}],["it’",{"_index":264,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{},"others/transactions.html":{}}}],["join",{"_index":331,"title":{"crud/query.html#Join":{}},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{}}}],["joinwith",{"_index":367,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["key",{"_index":177,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["left",{"_index":369,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["limit",{"_index":346,"title":{"crud/query.html#Offset-and-Limit":{}},"body":{"crud/query.html":{},"crud/query.html#Offset-and-Limit":{}}}],["limit=1",{"_index":316,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["list",{"_index":7,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["log.print",{"_index":387,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{}}}],["logger",{"_index":82,"title":{"others/logger.html":{},"others/logger.html#Logger":{}},"body":{"index.html":{},"index.html#Grimoire":{},"others/logger.html":{},"others/logger.html#Logger":{}}}],["long",{"_index":422,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["main",{"_index":47,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["mani",{"_index":204,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["manual",{"_index":360,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["map",{"_index":146,"title":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["match",{"_index":374,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{}}}],["method",{"_index":283,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["mode",{"_index":366,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["more",{"_index":227,"title":{},"body":{"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["multi",{"_index":81,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["multipl",{"_index":244,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["mustcreate(&amp;product",{"_index":164,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["mustdelet",{"_index":170,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["mustinsert",{"_index":418,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["mustinsert(&amp;us",{"_index":423,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["mustone(&amp;product",{"_index":166,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["mustupdate(&amp;product",{"_index":168,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["mysql",{"_index":14,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{}}}],["mysql.open",{"_index":49,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["name",{"_index":138,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Order":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["name=alic",{"_index":324,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["need",{"_index":21,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["needs.th",{"_index":235,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["nest",{"_index":209,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["new",{"_index":242,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["nil",{"_index":51,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["notic",{"_index":372,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{}}}],["null",{"_index":262,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["occur",{"_index":419,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["offset",{"_index":345,"title":{"crud/query.html#Offset-and-Limit":{}},"body":{"crud/query.html":{},"crud/query.html#Offset-and-Limit":{}}}],["on",{"_index":201,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{}}}],["onc",{"_index":245,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["one(&amp;us",{"_index":318,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{}}}],["option",{"_index":172,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["order",{"_index":3,"title":{"crud/query.html#Order":{}},"body":{"adapters.html":{},"adapters.html#Adapters":{},"crud/query.html":{},"crud/query.html#Order":{}}}],["orm",{"_index":61,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["orwher",{"_index":337,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["orwhere(c.eq(ag",{"_index":336,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["orwhere(c.eq(nam",{"_index":338,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["out",{"_index":10,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"crud/query.html":{},"crud/query.html#Where":{}}}],["outer",{"_index":371,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["overview",{"_index":59,"title":{"index.html":{}},"body":{}}],["packag",{"_index":12,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{}}}],["panic",{"_index":52,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["param",{"_index":145,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["pass",{"_index":280,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["patch",{"_index":267,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["perform",{"_index":303,"title":{},"body":{"crud/query.html":{},"crud/query.html#Query":{}}}],["possibl",{"_index":212,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["postgresql",{"_index":16,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{}}}],["pre",{"_index":252,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["preload",{"_index":75,"title":{"association/preloading.html":{},"association/preloading.html#Preloading":{}},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["preload(&amp;transact",{"_index":207,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["preload(&amp;us",{"_index":203,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["prepar",{"_index":270,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["presist",{"_index":255,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["previou",{"_index":430,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["price",{"_index":140,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["problem",{"_index":258,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["process",{"_index":253,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["product",{"_index":135,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/delete.html":{},"crud/delete.html#Delete":{}}}],["productchangeset",{"_index":144,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["productchangeset(product",{"_index":156,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["provid",{"_index":189,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["queri",{"_index":64,"title":{"crud/query.html":{},"crud/query.html#Query":{}},"body":{"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Query":{},"crud/query.html#Where":{},"crud/query.html#Offset-and-Limit":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{}}}],["quick",{"_index":85,"title":{"index.html#Quick-Start":{}},"body":{"index.html":{}}}],["record",{"_index":226,"title":{"crud/delete.html":{},"crud/insert.html":{},"crud/query.html":{},"crud/update.html":{}},"body":{"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Selecting-Fields":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["recov",{"_index":412,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["refer",{"_index":175,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["references:\"buyerid",{"_index":196,"title":{},"body":{"association/preloading.html":{}}}],["references:\"id",{"_index":187,"title":{},"body":{"association/preloading.html":{}}}],["references:buyerid",{"_index":220,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["references:id",{"_index":217,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["relat",{"_index":293,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["repan",{"_index":411,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["replac",{"_index":290,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{}}}],["repo",{"_index":25,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Quick-Start":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["repo&#x2019;",{"_index":388,"title":{},"body":{"others/logger.html#Logger":{}}}],["repo.from",{"_index":163,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["repo.from(addresses).join(us",{"_index":362,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["repo.from(addresses).join(users).all(&amp;allus",{"_index":359,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["repo.from(addresses).joinwith",{"_index":368,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["repo.from(users).find",{"_index":317,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["repo.from(users).group",{"_index":354,"title":{},"body":{"crud/query.html":{},"crud/query.html#Group-By":{}}}],["repo.from(users).limit",{"_index":347,"title":{},"body":{"crud/query.html":{},"crud/query.html#Offset-and-Limit":{}}}],["repo.from(users).order(c.asc(name)).all(&amp;allus",{"_index":349,"title":{},"body":{"crud/query.html":{},"crud/query.html#Order":{}}}],["repo.from(users).order(c.desc(name)).all(&amp;allus",{"_index":351,"title":{},"body":{"crud/query.html":{},"crud/query.html#Order":{}}}],["repo.from(users).select",{"_index":344,"title":{},"body":{"crud/query.html":{},"crud/query.html#Selecting-Fields":{}}}],["repo.from(users).where(c.eq(ag",{"_index":335,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["repo.from(users).where(c.eq(id",{"_index":320,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["repo.from(users).where(c.eq(nam",{"_index":325,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["repo.setlogg",{"_index":383,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{}}}],["repo.transact",{"_index":417,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["repo’",{"_index":381,"title":{},"body":{"others/logger.html":{}}}],["request",{"_index":268,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["result",{"_index":161,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["retriev",{"_index":323,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Group-By":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["return",{"_index":152,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["roll",{"_index":420,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["rollback",{"_index":407,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["root@(127.0.0.1:3306)/db?charset=utf8&amp;parsetime=true&amp;loc=loc",{"_index":153,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["root@(127.0.0.1:3306)/grimoire_test?charset=utf8&amp;parsetime=true&amp;loc=loc",{"_index":50,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{}}}],["run",{"_index":405,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["save",{"_index":282,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["save(&amp;[]userus",{"_index":246,"title":{},"body":{"crud/insert.html":{}}}],["save(&amp;[]user{us",{"_index":297,"title":{},"body":{"crud/insert.html#Insert":{}}}],["save(&amp;us",{"_index":243,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["schema",{"_index":178,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["see",{"_index":307,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["select",{"_index":304,"title":{"crud/query.html#Selecting-Fields":{}},"body":{"crud/query.html":{},"crud/query.html#Query":{},"crud/query.html#Selecting-Fields":{},"crud/query.html#Group-By":{}}}],["set",{"_index":176,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["set(\"user_id",{"_index":426,"title":{},"body":{"others/transactions.html":{}}}],["set(user_id",{"_index":432,"title":{},"body":{"others/transactions.html#Transactions":{}}}],["setlogg",{"_index":382,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{}}}],["shampoo",{"_index":157,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["similar",{"_index":373,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["similarli",{"_index":342,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["simpl",{"_index":228,"title":{},"body":{"crud/delete.html":{},"crud/delete.html#Delete":{}}}],["slice",{"_index":208,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["snake",{"_index":391,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["solv",{"_index":257,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["someth",{"_index":160,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["specifi",{"_index":361,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["sqlite3",{"_index":18,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{}}}],["start",{"_index":86,"title":{"index.html#Quick-Start":{}},"body":{"index.html":{}}}],["string",{"_index":139,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/logger.html":{},"others/logger.html#Logger":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["struct",{"_index":76,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["style",{"_index":77,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["support",{"_index":9,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/query.html":{},"crud/query.html#Where":{},"others/logger.html":{},"others/logger.html#Logger":{}}}],["tabl",{"_index":183,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["tag",{"_index":174,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["there&#x2019;",{"_index":295,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{}}}],["there’",{"_index":231,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{}}}],["three",{"_index":232,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["throw",{"_index":408,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["time",{"_index":131,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["time.dur",{"_index":385,"title":{},"body":{"others/logger.html":{},"others/logger.html#Logger":{}}}],["time.tim",{"_index":142,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["transact",{"_index":186,"title":{"others/transactions.html":{},"others/transactions.html#Transactions":{}},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["transactionid",{"_index":200,"title":{},"body":{"association/preloading.html":{}}}],["transaction{id",{"_index":223,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["treat",{"_index":400,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["tri",{"_index":190,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["tricki",{"_index":266,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["type",{"_index":134,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["undefin",{"_index":263,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["unexpectederror",{"_index":410,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["updat",{"_index":78,"title":{"crud/update.html":{},"crud/update.html#Update":{}},"body":{"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"crud/query.html":{},"crud/query.html#Query":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["update(&amp;us",{"_index":378,"title":{},"body":{"crud/update.html":{},"crud/update.html#Update":{}}}],["updated_at",{"_index":286,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["updatedat",{"_index":143,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["us",{"_index":2,"title":{},"body":{"adapters.html":{},"adapters.html#Adapters":{},"index.html":{},"index.html#Grimoire":{},"index.html#Quick-Start":{},"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Query":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["user",{"_index":184,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/query.html":{},"crud/query.html#Where":{},"crud/query.html#Join":{},"crud/update.html":{},"crud/update.html#Update":{},"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["user.id",{"_index":427,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["user.id)).one(&amp;us",{"_index":321,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["user.id).mustinsert(&amp;user.address",{"_index":431,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["user.th",{"_index":250,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["user_id",{"_index":429,"title":{},"body":{"others/transactions.html":{},"others/transactions.html#Transactions":{}}}],["userid",{"_index":199,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["userid=10",{"_index":202,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["usernam",{"_index":240,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{}}}],["users).all(&amp;allus",{"_index":370,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["users.id",{"_index":365,"title":{},"body":{"crud/query.html":{},"crud/query.html#Join":{}}}],["userus",{"_index":377,"title":{},"body":{"crud/update.html":{}}}],["user{id",{"_index":222,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["user{nam",{"_index":296,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{}}}],["user{us",{"_index":379,"title":{},"body":{"crud/update.html#Update":{}}}],["user{{id",{"_index":224,"title":{},"body":{"association/preloading.html#Preloading":{}}}],["usual",{"_index":265,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["valid",{"_index":80,"title":{},"body":{"index.html":{},"index.html#Grimoire":{},"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["validation.it",{"_index":67,"title":{},"body":{"index.html":{},"index.html#Grimoire":{}}}],["valu",{"_index":261,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["var",{"_index":154,"title":{},"body":{"index.html":{},"index.html#Quick-Start":{}}}],["variabl",{"_index":311,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["variou",{"_index":305,"title":{},"body":{"crud/query.html":{},"crud/query.html#Where":{}}}],["virtual",{"_index":398,"title":{},"body":{"others/field-mapping.html":{},"others/field-mapping.html#Field-Mapping":{}}}],["want",{"_index":247,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}],["way",{"_index":237,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["where(c.eq(c.i",{"_index":215,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{},"crud/delete.html":{},"crud/delete.html#Delete":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["within",{"_index":171,"title":{},"body":{"association/preloading.html":{},"association/preloading.html#Preloading":{}}}],["without",{"_index":281,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["won&#x2019;t",{"_index":300,"title":{},"body":{"crud/insert.html#Insert":{},"crud/update.html#Update":{}}}],["won’t",{"_index":284,"title":{},"body":{"crud/insert.html":{},"crud/update.html":{}}}],["world",{"_index":273,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{},"crud/update.html":{},"crud/update.html#Update":{}}}],["zero",{"_index":260,"title":{},"body":{"crud/insert.html":{},"crud/insert.html#Insert":{}}}]],"pipeline":["stemmer"]},"store":{"adapters.html":{"title":"Adapters","path":"/adapters.html","body":"Adapters Grimoire uses adapter in order to connect to database, below is the list of available adapters supported by grimoire out of the box. Adapter Package Godoc MySQL github.com/Fs02/grimoire/adapter/mysql PostgreSQL github.com/Fs02/grimoire/adapter/postgres SQLite3 github.com/Fs02/grimoire/adapter/sqlite3 In order to connect to database, first you need to initialize adapter and then create a grimoire’s repo using the adapter instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ( \t \"github.com/Fs02/grimoire\" \t \"github.com/Fs02/grimoire/adapter/mysql\" // use mysql adapter ) func main ()  \t // initialize mysql adapter. \tadapter, err := mysql.Open( \"root@(127.0.0.1:3306)/grimoire_test?charset=utf8&amp;parseTime=True&amp;loc=Local\" ) \t if err != nil  \t\t panic (err) \t \t defer adapter.Close() \t // initialize grimoire's repo. repo := grimoire.New(adapter) "},"adapters.html#Adapters":{"title":"Adapters","path":"/adapters.html#Adapters","body":"Grimoire uses adapter in order to connect to database, below is the list of available adapters supported by grimoire out of the box. Adapter Package Godoc MySQL github.com/Fs02/grimoire/adapter/mysql PostgreSQL github.com/Fs02/grimoire/adapter/postgres SQLite3 github.com/Fs02/grimoire/adapter/sqlite3 In order to connect to database, first you need to initialize adapter and then create a grimoire&#x2019;s repo using the adapter instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import ( \t github.com/Fs02/grimoire \t github.com/Fs02/grimoire/adapter/mysql // use mysql adapter ) func main () { \t // initialize mysql adapter. \tadapter, err := mysql.Open( root@(127.0.0.1:3306)/grimoire_test?charset=utf8&amp;parseTime=True&amp;loc=Local ) \t if err != nil { \t\t panic (err) \t} \t defer adapter.Close() \t // initialize grimoire&apos;s repo. repo := grimoire.New(adapter) }"},"index.html":{"title":"Overview","path":"/index.html","body":"Grimoire Grimoire is a flexible ORM for golang.It features flexible query API and builtin validation.It currently supports MySQL, PostgreSQL and SQLite3 but a custom adapter can be implemented easily using the Adapter interface. Features: Query Builder Association Preloading Struct style create and update Changeset Style create and update Builtin validation using changeset Multi adapter support Logger Install 1 go get github.com/Fs02/grimoire Quick Start 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package main import ( \t \"time\" \t \"github.com/Fs02/grimoire\" \t. \"github.com/Fs02/grimoire/c\" \t \"github.com/Fs02/grimoire/adapter/mysql\" \t \"github.com/Fs02/grimoire/changeset\" ) type Product struct  \tID int \tName string \tPrice int \tCreatedAt time.Time \tUpdatedAt time.Time  func ProductChangeset (product interface , params map [ string ] interface ) * changeset . Changeset  \tch := changeset.Cast(product, params, [] string  \"name\" , \"price\" ) \tchangeset.ValidateRequired(ch, [] string  \"name\" , \"price\" ) \tchangeset.ValidateMin(ch, \"price\" , 100 ) \t return ch  func main ()  \t // initialize mysql adapter. \tadapter, err := mysql.Open( \"root@(127.0.0.1:3306)/db?charset=utf8&amp;parseTime=True&amp;loc=Local\" ) \t if err != nil  \t\t panic (err) \t \t defer adapter.Close() \t // initialize grimoire's repo. \trepo := grimoire.New(adapter) \t var product Product \t // Changeset is used when creating or updating your data. \tch := ProductChangeset(product, map [ string ] interface  \t\t \"name\" : \"shampoo\" , \t\t \"price\" : 1000 \t) \t if ch.Error() != nil  \t\t // do something \t \t // Create products with changeset and return the result to &amp;product, \trepo.From( \"products\" ).MustCreate(&amp;product, ch) \t // Find a product with id 1. \trepo.From( \"products\" ).Find( 1 ).MustOne(&amp;product) \t // Update products with id=1. \trepo.From( \"products\" ).Find( 1 ).MustUpdate(&amp;product, ch) \t // Delete Product with id=1. \trepo.From( \"products\" ).Find( 1 ).MustDelete() "},"index.html#Grimoire":{"title":"Grimoire","path":"/index.html#Grimoire","body":"Grimoire is a flexible ORM for golang.It features flexible query API and builtin validation.It currently supports MySQL, PostgreSQL and SQLite3 but a custom adapter can be implemented easily using the Adapter interface. Features: Query Builder Association Preloading Struct style create and update Changeset Style create and update Builtin validation using changeset Multi adapter support Logger"},"index.html#Install":{"title":"Install","path":"/index.html#Install","body":"1 go get github.com/Fs02/grimoire"},"index.html#Quick-Start":{"title":"Quick Start","path":"/index.html#Quick-Start","body":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package main import ( \t time \t github.com/Fs02/grimoire \t. github.com/Fs02/grimoire/c \t github.com/Fs02/grimoire/adapter/mysql \t github.com/Fs02/grimoire/changeset ) type Product struct { \tID int \tName string \tPrice int \tCreatedAt time.Time \tUpdatedAt time.Time } func ProductChangeset (product interface {}, params map [ string ] interface {}) * changeset . Changeset { \tch := changeset.Cast(product, params, [] string { name , price }) \tchangeset.ValidateRequired(ch, [] string { name , price }) \tchangeset.ValidateMin(ch, price , 100 ) \t return ch } func main () { \t // initialize mysql adapter. \tadapter, err := mysql.Open( root@(127.0.0.1:3306)/db?charset=utf8&amp;parseTime=True&amp;loc=Local ) \t if err != nil { \t\t panic (err) \t} \t defer adapter.Close() \t // initialize grimoire&apos;s repo. \trepo := grimoire.New(adapter) \t var product Product \t // Changeset is used when creating or updating your data. \tch := ProductChangeset(product, map [ string ] interface {}{ \t\t name : shampoo , \t\t price : 1000 \t}) \t if ch.Error() != nil { \t\t // do something \t} \t // Create products with changeset and return the result to &amp;product, \trepo.From( products ).MustCreate(&amp;product, ch) \t // Find a product with id 1. \trepo.From( products ).Find( 1 ).MustOne(&amp;product) \t // Update products with id=1. \trepo.From( products ).Find( 1 ).MustUpdate(&amp;product, ch) \t // Delete Product with id=1. \trepo.From( products ).Find( 1 ).MustDelete() }"},"association/preloading.html":{"title":"Preloading Association","path":"/association/preloading.html","body":"Preloading Grimoire supports preloading association within struct using grimoire query builder. Optional field tags: references - Sets the key on the current schema to be used for the association. foreign_key - Sets the foreign key, this should map to a field on the other schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // Assume the following tables. type User struct  \tID int \tName string \tAge int \tTransactions []Transaction `references:\"ID\" foreign_key:\"BuyerID\"` // Optional, if not provided grimoire will try to guess it for you \tAddress Address \tCreatedAt time.Time \tUpdatedAt time.Time  type Transaction struct  \tID int \tBuyerID int `db:\"user_id\"` \tBuyer User `references:\"BuyerID\" foreign_key:\"ID\"`  type Address struct  \tID int \tCity string \tUserID * int \tUser *User  user := UserID: 10  transaction := TransactionID: 10 , BuyerID: 10  // Preload an address (has one) where UserID=10. repo.From( \"addresses\" ).Preload(&amp;user, \"Address\" ) // Preload transactions (has many) where UserID=10. repo.From( \"transactions\" ).Preload(&amp;user, \"Transaction\" ) // Preload buyer (belongs to) where ID=10 repo.From( \"users\" ).Preload(&amp;transaction, \"Buyer\" ) // Grimoire supports preloading using slice of structs. users := []UserID: 10 , ID: 20  repo.From( \"addresses\" ).Preload(&amp;users, \"Address\" ) // Grimoire supports preloading nested struct. // Preload buyer first. repo.From( \"users\" ).Preload(&amp;transaction, \"Buyer\" ) // then preload its address. repo.From( \"addresses\" ).Preload(&amp;transaction, \"Buyer.Address\" ) // It's also possible to add custom query to preloading query. // Only preload address with city=Bandung. repo.From( \"addresses\" ).Where(c.Eq(c.I( \"city\" ), \"Bandung\" )).Preload(&amp;user, \"Address\" )"},"association/preloading.html#Preloading":{"title":"Preloading","path":"/association/preloading.html#Preloading","body":"Grimoire supports preloading association within struct using grimoire query builder. Optional field tags: references - Sets the key on the current schema to be used for the association. foreign_key - Sets the foreign key, this should map to a field on the other schema. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // Assume the following tables. type User struct { \tID int \tName string \tAge int \tTransactions []Transaction `references:ID foreign_key:BuyerID` // Optional, if not provided grimoire will try to guess it for you \tAddress Address \tCreatedAt time.Time \tUpdatedAt time.Time } type Transaction struct { \tID int \tBuyerID int `db:user_id` \tBuyer User `references:BuyerID foreign_key:ID` } type Address struct { \tID int \tCity string \tUserID * int \tUser *User } user := User{ID: 10 } transaction := Transaction{ID: 10 , BuyerID: 10 } // Preload an address (has one) where UserID=10. repo.From( addresses ).Preload(&amp;user, Address ) // Preload transactions (has many) where UserID=10. repo.From( transactions ).Preload(&amp;user, Transaction ) // Preload buyer (belongs to) where ID=10 repo.From( users ).Preload(&amp;transaction, Buyer ) // Grimoire supports preloading using slice of structs. users := []User{{ID: 10 , ID: 20 }} repo.From( addresses ).Preload(&amp;users, Address ) // Grimoire supports preloading nested struct. // Preload buyer first. repo.From( users ).Preload(&amp;transaction, Buyer ) // then preload its address. repo.From( addresses ).Preload(&amp;transaction, Buyer.Address ) // It&apos;s also possible to add custom query to preloading query. // Only preload address with city=Bandung. repo.From( addresses ).Where(c.Eq(c.I( city ), Bandung )).Preload(&amp;user, Address )"},"crud/delete.html":{"title":"Deleting Records","path":"/crud/delete.html","body":"Delete Deleting one or more records is simple. 1 2 3 4 5 6 7 8 // Delete a record with id=1. err := repo.From( \"products\" ).Find( 1 ).Delete() // Delete records where age=18 err := repo.From( \"users\" ).Where(c.Eq(c.I( \"age\" ), 18 )).Delete() // Delete all records. err := repo.From( \"users\" ).Delete()"},"crud/delete.html#Delete":{"title":"Delete","path":"/crud/delete.html#Delete","body":"Deleting one or more records is simple. 1 2 3 4 5 6 7 8 // Delete a record with id=1. err := repo.From( products ).Find( 1 ).Delete() // Delete records where age=18 err := repo.From( users ).Where(c.Eq(c.I( age ), 18 )).Delete() // Delete all records. err := repo.From( users ).Delete()"},"crud/insert.html":{"title":"Inserting Records","path":"/crud/insert.html","body":"Insert There’s three alternatives on how you can insert records to a database depending on your needs.The easiest way is by using struct directly like in most other Golang ORM. 1 2 3 4 5 6 user := UserName: \"Alice\" , Age: 18  // Create a new record in `users`. err := repo.From( \"users\" ).Save(&amp;user) // Create multiple records at once, err := repo.From( \"users\" ).Save(&amp;[]Useruser, user) The other way is by using changeset, most of the time you might want to use this way especially when handling data from user.The advantages of using changeset is you can validates and pre-process your data before presisting to database.Using changeset also solves the problem of dealing with zero values , null and undefined fields where it’s usually tricky to handle in patch request. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 user := User // this also hold the schema // prepare the changes ch := changeset.Cast(user, map [ string ] interface  \t \"name\" : \"Alice\" , \t \"age\" : 18 , \t \"address\" : \"world\" , , [] string  \"name\" , \"age\" ) // this will filter `address`. changeset.ValidateRequired(ch, [] string  \"name\" , \"age\" ) // validate `name` and `age` field exists. // Insert changes to `users` table and return the result to `&amp;user`. err := repo.From( \"users\" ).Insert(&amp;user, ch) // It's also possible to insert multiple changes at once. users := []User err := repo.From( \"users\" ).Insert(&amp;users, ch, ch) // If you don't care about the return value, you can pass nil. err := repo.From( \"users\" ).Insert( nil , ch) It’s also possible to insert using query builder directly. Inserting without using changeset or Save method won’t set created_at and updated_at fields. 1 2 3 4 5 6 7 8 9 10 // Insert a record to users. err := repo.From( \"users\" ).Set( \"name\" , \"Alice\" ).Set( \"age\" , 18 ).Insert(&amp;user) // If you don't care about the return value, you can pass nil. err := repo.From( \"users\" ).Set( \"name\" , \"Alice\" ).Set( \"age\" , 18 ).Insert( nil ) // When used alongside Changeset or using `Save` function, it'll replace value defined in changeset or struct. // This behaviour especially useful when dealing with relation. err := repo.From( \"users\" ).Set( \"crew_id\" , 10 ).Insert(&amp;user, ch, ch, ch) err := repo.From( \"users\" ).Set( \"crew_id\" , 10 ).Save(&amp;users)"},"crud/insert.html#Insert":{"title":"Insert","path":"/crud/insert.html#Insert","body":"There&#x2019;s three alternatives on how you can insert records to a database depending on your needs.The easiest way is by using struct directly like in most other Golang ORM. 1 2 3 4 5 6 user := User{Name: Alice , Age: 18 } // Create a new record in `users`. err := repo.From( users ).Save(&amp;user) // Create multiple records at once, err := repo.From( users ).Save(&amp;[]User{user, user}) The other way is by using changeset, most of the time you might want to use this way especially when handling data from user.The advantages of using changeset is you can validates and pre-process your data before presisting to database.Using changeset also solves the problem of dealing with zero values , null and undefined fields where it&#x2019;s usually tricky to handle in patch request. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 user := User{} // this also hold the schema // prepare the changes ch := changeset.Cast(user, map [ string ] interface {}{ \t name : Alice , \t age : 18 , \t address : world , }, [] string { name , age }) // this will filter `address`. changeset.ValidateRequired(ch, [] string { name , age }) // validate `name` and `age` field exists. // Insert changes to `users` table and return the result to `&amp;user`. err := repo.From( users ).Insert(&amp;user, ch) // It&apos;s also possible to insert multiple changes at once. users := []User{} err := repo.From( users ).Insert(&amp;users, ch, ch) // If you don&apos;t care about the return value, you can pass nil. err := repo.From( users ).Insert( nil , ch) It&#x2019;s also possible to insert using query builder directly. Inserting without using changeset or Save method won&#x2019;t set created_at and updated_at fields. 1 2 3 4 5 6 7 8 9 10 // Insert a record to users. err := repo.From( users ).Set( name , Alice ).Set( age , 18 ).Insert(&amp;user) // If you don&apos;t care about the return value, you can pass nil. err := repo.From( users ).Set( name , Alice ).Set( age , 18 ).Insert( nil ) // When used alongside Changeset or using `Save` function, it&apos;ll replace value defined in changeset or struct. // This behaviour especially useful when dealing with relation. err := repo.From( users ).Set( crew_id , 10 ).Insert(&amp;user, ch, ch, ch) err := repo.From( users ).Set( crew_id , 10 ).Save(&amp;users)"},"crud/query.html":{"title":"Querying Records","path":"/crud/query.html","body":"Query In general Grimoire’s use query builder to perform select, insert, update and delete query. Where Grimoire’s support various condition in query builder. to see a full list of supported condition check this out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // declare some variables. users := \"users\" id := c.I( \"id\" ) // identify column in a table. name := c.I( \"name\" ) age := c.I( \"age\" ) user := User // Get a record from users table using id. // One will automatically add limit=1 to query. err := repo.From(users).Find( 1 ).One(&amp;user) // Which equal to: err := repo.From(users).Where(c.Eq(id, user.ID)).One(&amp;user) alluser := []User // Retrieves all record where name=Alice err := repo.From(users).Where(c.Eq(name, \"Alice\" )).All(&amp;alluser) // You can add more condition just by adding more arguments. // This will retrieve all record where name=Alice and age=10. // All condition inside where will automatically joined using and expression. err := repo.From(users).Where(c.Eq(name, \"Alice\" ), c.Ne(age, 10 )).All(&amp;alluser) // Use or: // This will retrieve all record where age=10 or age=15. err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(age, 15 )).All(&amp;alluser) // Multiple condition inside `OrWhere` will be joined using and expression. // This will retrieve all record where age=10 or (name=Alice and age=15). err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(name, \"Alice\" ), c.Eq(age, 15 )).All(&amp;alluser) // Count query can be done similarly like querying result. count, err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(name, \"Alice\" ), c.Eq(age, 15 )).Count() Selecting Fields 1 2 // Get one record and only select only it's name and age. er := repo.From(users).Select( \"name\" , \"age\" ).Find( 1 ).One(&amp;user) Offset and Limit 1 2 3 4 5 // Limit query by 5. err := repo.From(users).Limit( 5 ).All(&amp;alluser) // Limit by 5 and offset by 5. err := repo.From(users).Limit( 5 ).Offset( 5 ).All(&amp;alluser) Order 1 2 3 4 5 // Order by name ascending. err := repo.From(users).Order(c.Asc(name)).All(&amp;alluser) // Order by name descending. err := repo.From(users).Order(c.Desc(name)).All(&amp;alluser) Group By 1 2 3 4 5 // Group by gender and retrieves it's count. err := repo.From(users).Group( \"gender\" ).Select( \"COUNT(id)\" ).All(&amp;alluser) // Group by with having. err := repo.From(users).Group( \"age\" ).Having(c.Gt(age, 10 )).Select( \"COUNT(id)\" ).All(&amp;alluser) Join 1 2 3 4 5 6 7 8 9 // Join addresses table with users on addresses.user_id=users.id err := repo.From(addresses).Join(users).All(&amp;alluser) // Which equal to this if the join condition is manually specified. err := repo.From(addresses).Join(users, c.Eq(c.I( \"addresses.user_id\" ), c.I( \"users.id\" ))).All(&amp;alluser) // It's also possible to join using other join mode using `JoinWith` err := repo.From(addresses).JoinWith( \"LEFT JOIN\" , users).All(&amp;alluser) err := repo.From(addresses).JoinWith( \"LEFT OUTER JOIN\" , users).All(&amp;alluser)"},"crud/query.html#Query":{"title":"Query","path":"/crud/query.html#Query","body":"In general Grimoire&#x2019;s use query builder to perform select, insert, update and delete query."},"crud/query.html#Where":{"title":"Where","path":"/crud/query.html#Where","body":"Grimoire&#x2019;s support various condition in query builder. to see a full list of supported condition check this out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // declare some variables. users := users id := c.I( id ) // identify column in a table. name := c.I( name ) age := c.I( age ) user := User{} // Get a record from users table using id. // One will automatically add limit=1 to query. err := repo.From(users).Find( 1 ).One(&amp;user) // Which equal to: err := repo.From(users).Where(c.Eq(id, user.ID)).One(&amp;user) alluser := []User{} // Retrieves all record where name=Alice err := repo.From(users).Where(c.Eq(name, Alice )).All(&amp;alluser) // You can add more condition just by adding more arguments. // This will retrieve all record where name=Alice and age=10. // All condition inside where will automatically joined using and expression. err := repo.From(users).Where(c.Eq(name, Alice ), c.Ne(age, 10 )).All(&amp;alluser) // Use or: // This will retrieve all record where age=10 or age=15. err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(age, 15 )).All(&amp;alluser) // Multiple condition inside `OrWhere` will be joined using and expression. // This will retrieve all record where age=10 or (name=Alice and age=15). err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(name, Alice ), c.Eq(age, 15 )).All(&amp;alluser) // Count query can be done similarly like querying result. count, err := repo.From(users).Where(c.Eq(age, 10 )).OrWhere(c.Eq(name, Alice ), c.Eq(age, 15 )).Count()"},"crud/query.html#Selecting-Fields":{"title":"Selecting Fields","path":"/crud/query.html#Selecting-Fields","body":"1 2 // Get one record and only select only it&apos;s name and age. er := repo.From(users).Select( name , age ).Find( 1 ).One(&amp;user)"},"crud/query.html#Offset-and-Limit":{"title":"Offset and Limit","path":"/crud/query.html#Offset-and-Limit","body":"1 2 3 4 5 // Limit query by 5. err := repo.From(users).Limit( 5 ).All(&amp;alluser) // Limit by 5 and offset by 5. err := repo.From(users).Limit( 5 ).Offset( 5 ).All(&amp;alluser)"},"crud/query.html#Order":{"title":"Order","path":"/crud/query.html#Order","body":"1 2 3 4 5 // Order by name ascending. err := repo.From(users).Order(c.Asc(name)).All(&amp;alluser) // Order by name descending. err := repo.From(users).Order(c.Desc(name)).All(&amp;alluser)"},"crud/query.html#Group-By":{"title":"Group By","path":"/crud/query.html#Group-By","body":"1 2 3 4 5 // Group by gender and retrieves it&apos;s count. err := repo.From(users).Group( gender ).Select( COUNT(id) ).All(&amp;alluser) // Group by with having. err := repo.From(users).Group( age ).Having(c.Gt(age, 10 )).Select( COUNT(id) ).All(&amp;alluser)"},"crud/query.html#Join":{"title":"Join","path":"/crud/query.html#Join","body":"1 2 3 4 5 6 7 8 9 // Join addresses table with users on addresses.user_id=users.id err := repo.From(addresses).Join(users).All(&amp;alluser) // Which equal to this if the join condition is manually specified. err := repo.From(addresses).Join(users, c.Eq(c.I( addresses.user_id ), c.I( users.id ))).All(&amp;alluser) // It&apos;s also possible to join using other join mode using `JoinWith` err := repo.From(addresses).JoinWith( LEFT JOIN , users).All(&amp;alluser) err := repo.From(addresses).JoinWith( LEFT OUTER JOIN , users).All(&amp;alluser)"},"crud/update.html":{"title":"Updating Records","path":"/crud/update.html","body":"Update There’s also three alternatives on how you can update records to a database. The easiest way is by using struct directly. 1 2 3 4 5 6 7 8 9 10 11 user := UserName: \"Alice\" , Age: 18  // Update a record from `users` where id=1. // Notice updating a record using `Save` function is similar to creating, but you will need to specify condition. err := repo.From( \"users\" ).Find( 1 ).Save(&amp;user) // It's also possible to update multiple record (where age=18) at once and retrieves all the results. // The following will update all record matches the condition and return it to array. // Only the first item from slice will be used as update value. users := []Useruser err := repo.From( \"users\" ).Where(c.Eq(c.I( \"age\" ), 18 )).Save(&amp;users) Updating using changeset is similar to inserting. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 user := User // this also hold the schema // prepare the changes ch := changeset.Cast(user, map [ string ] interface  \t \"name\" : \"Alice\" , \t \"age\" : 18 , \t \"address\" : \"world\" , , [] string  \"name\" , \"age\" ) // this will filter `address`. changeset.ValidateRequired(ch, [] string  \"name\" , \"age\" ) // validate `name` and `age` field exists. // Update changes to `users` where id=1 table and return the result to `&amp;user`. err := repo.From( \"users\" ).Find( 1 ).Update(&amp;user, ch) // If you don't care about the return value, you can pass nil. err := repo.From( \"users\" ).Find( 1 ).Update( nil , ch) // The following will update all record matches the condition and return it to array. users := []Useruser err := repo.From( \"users\" ).Where(c.Eq(c.I( \"age\" ), 18 )).Update(&amp;user, ch) // If no condition is used, grimoire will update all records. err := repo.From( \"users\" ).Update( nil , ch) It’s also possible to update using query builder directly. Update a record without using changeset or Save method won’t set updated_at fields. 1 2 3 4 5 6 7 8 9 10 // Update a record where id=1. err := repo.From( \"users\" ).Find( 1 ).Set( \"name\" , \"Alice\" ).Set( \"age\" , 18 ).Update(&amp;user) // If you don't care about the return value, you can pass nil. err := repo.From( \"users\" ).Find( 1 ).Set( \"name\" , \"Alice\" ).Set( \"age\" , 18 ).Update( nil ) // When used alongside Changeset or using `Save` function, it'll replace value defined in changeset or struct. // This behaviour especially useful when dealing with relation. err := repo.From( \"users\" ).Find( 1 ).Set( \"crew_id\" , 10 ).Update(&amp;user, ch, ch, ch) err := repo.From( \"users\" ).Find( 1 ).Set( \"crew_id\" , 10 ).Save(&amp;users)"},"crud/update.html#Update":{"title":"Update","path":"/crud/update.html#Update","body":"There&#x2019;s also three alternatives on how you can update records to a database. The easiest way is by using struct directly. 1 2 3 4 5 6 7 8 9 10 11 user := User{Name: Alice , Age: 18 } // Update a record from `users` where id=1. // Notice updating a record using `Save` function is similar to creating, but you will need to specify condition. err := repo.From( users ).Find( 1 ).Save(&amp;user) // It&apos;s also possible to update multiple record (where age=18) at once and retrieves all the results. // The following will update all record matches the condition and return it to array. // Only the first item from slice will be used as update value. users := []User{user} err := repo.From( users ).Where(c.Eq(c.I( age ), 18 )).Save(&amp;users) Updating using changeset is similar to inserting. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 user := User{} // this also hold the schema // prepare the changes ch := changeset.Cast(user, map [ string ] interface {}{ \t name : Alice , \t age : 18 , \t address : world , }, [] string { name , age }) // this will filter `address`. changeset.ValidateRequired(ch, [] string { name , age }) // validate `name` and `age` field exists. // Update changes to `users` where id=1 table and return the result to `&amp;user`. err := repo.From( users ).Find( 1 ).Update(&amp;user, ch) // If you don&apos;t care about the return value, you can pass nil. err := repo.From( users ).Find( 1 ).Update( nil , ch) // The following will update all record matches the condition and return it to array. users := []User{user} err := repo.From( users ).Where(c.Eq(c.I( age ), 18 )).Update(&amp;user, ch) // If no condition is used, grimoire will update all records. err := repo.From( users ).Update( nil , ch) It&#x2019;s also possible to update using query builder directly. Update a record without using changeset or Save method won&#x2019;t set updated_at fields. 1 2 3 4 5 6 7 8 9 10 // Update a record where id=1. err := repo.From( users ).Find( 1 ).Set( name , Alice ).Set( age , 18 ).Update(&amp;user) // If you don&apos;t care about the return value, you can pass nil. err := repo.From( users ).Find( 1 ).Set( name , Alice ).Set( age , 18 ).Update( nil ) // When used alongside Changeset or using `Save` function, it&apos;ll replace value defined in changeset or struct. // This behaviour especially useful when dealing with relation. err := repo.From( users ).Find( 1 ).Set( crew_id , 10 ).Update(&amp;user, ch, ch, ch) err := repo.From( users ).Find( 1 ).Set( crew_id , 10 ).Save(&amp;users)"},"others/logger.html":{"title":"Logger","path":"/others/logger.html","body":"Logger Grimoire’s default logger can be replaced with repo’s SetLogger() function. Multiple logger is supported by grimoire. 1 2 3 4 // replace default logger with custom logger function. repo.SetLogger( func (query string , duration time.Duration, err error)  \tlog.Print( \"[\" , duration, \"] - \" , query) )"},"others/logger.html#Logger":{"title":"Logger","path":"/others/logger.html#Logger","body":"Grimoire&#x2019;s default logger can be replaced with repo&#x2019;s SetLogger() function. Multiple logger is supported by grimoire. 1 2 3 4 // replace default logger with custom logger function. repo.SetLogger( func (query string , duration time.Duration, err error) { \tlog.Print( [ , duration, ] -  , query) })"},"others/field-mapping.html":{"title":"Field Mapping","path":"/others/field-mapping.html","body":"Field Mapping By default Grimoire’s will map struct fields by converting field’s name to snake case. field name can also be defined manually using struct tags. 1 2 3 4 5 type Entity struct  \tALLCAP\t\t bool \t `db:\"all_cap\"` \t // map `ALLCAP` as `all_cap` \tVirtual\t\t bool \t `db:\"-\"` \t // using `-` will treat field as virtual. \tFullName\t string \t\t\t // by default it'll map to `full_name` "},"others/field-mapping.html#Field-Mapping":{"title":"Field Mapping","path":"/others/field-mapping.html#Field-Mapping","body":"By default Grimoire&#x2019;s will map struct fields by converting field&#x2019;s name to snake case. field name can also be defined manually using struct tags. 1 2 3 4 5 type Entity struct { \tALLCAP\t\t bool \t `db:all_cap` \t // map `ALLCAP` as `all_cap` \tVirtual\t\t bool \t `db:-` \t // using `-` will treat field as virtual. \tFullName\t string \t\t\t // by default it&apos;ll map to `full_name` }"},"others/transactions.html":{"title":"Transactions","path":"/others/transactions.html","body":"Transactions Transactions in grimoire are run inside a transaction function that returns an error. Commit and Rollback are handled automatically by grimoire, transaction will rollback when the function returns an error or throws a panic. if panic is not caused by grimoire’s error or it’s an grimoire’s UnexpectedError() , the function will repanic after recover. If no error returned or function did not panic, then the transaction will be commited. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 user := User // cast user changes alongside addreses ch := changeUser(user, params) if ch.Error()  \t // do something  // declare and execute transaction err := repo.Transaction( func repo grimoire . Repo ) error  \t // MustInsert similar to Insert, but this will panic if any error occured. \t // If it's panic, transaction will automatically rolled back \t // and the panic cause will be returned as an error as long as it's grimoire's error. \trepo.From( \"users\" ).MustInsert(&amp;user, ch) \t // Get array of addresses changeset. \taddresses := ch.Changes()[ \"addresses\" ].([]*changeset.Changeset) \t // Insert multiple addresses changeset at once. \t // Set(\"user_id\", user.ID) will ensure it's user_id refer to previous inserted user. \trepo.From( \"addresses\" ).Set( \"user_id\" , user.ID).MustInsert(&amp;user.Addresses, addresses...) \t // commit transaction \t return nil ) if err != nil  \t // do something "},"others/transactions.html#Transactions":{"title":"Transactions","path":"/others/transactions.html#Transactions","body":"Transactions in grimoire are run inside a transaction function that returns an error. Commit and Rollback are handled automatically by grimoire, transaction will rollback when the function returns an error or throws a panic. if panic is not caused by grimoire&#x2019;s error or it&#x2019;s an grimoire&#x2019;s UnexpectedError() , the function will repanic after recover. If no error returned or function did not panic, then the transaction will be commited. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 user := User{} // cast user changes alongside addreses ch := changeUser(user, params) if ch.Error() { \t // do something } // declare and execute transaction err := repo.Transaction( func repo grimoire . Repo ) error { \t // MustInsert similar to Insert, but this will panic if any error occured. \t // If it&apos;s panic, transaction will automatically rolled back \t // and the panic cause will be returned as an error as long as it&apos;s grimoire&apos;s error. \trepo.From( users ).MustInsert(&amp;user, ch) \t // Get array of addresses changeset. \taddresses := ch.Changes()[ addresses ].([]*changeset.Changeset) \t // Insert multiple addresses changeset at once. \t // Set(user_id, user.ID) will ensure it&apos;s user_id refer to previous inserted user. \trepo.From( addresses ).Set( user_id , user.ID).MustInsert(&amp;user.Addresses, addresses...) \t // commit transaction \t return nil }) if err != nil { \t // do something }"}}}